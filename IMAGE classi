import os
import numpy as np
from tensorflow.keras import layers, models
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from sklearn.metrics.pairwise import cosine_similarity

class ImageComparison:
    def __init__(self, master_folder):
        self.master_folder = master_folder
        self.model = self.build_model()  # Build the CNN model

    def build_model(self):
        """Build a simple CNN model for feature extraction."""
        model = models.Sequential()
        model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)))
        model.add(layers.MaxPooling2D(pool_size=(2, 2)))
        model.add(layers.Conv2D(64, (3, 3), activation='relu'))
        model.add(layers.MaxPooling2D(pool_size=(2, 2)))
        model.add(layers.Conv2D(128, (3, 3), activation='relu'))
        model.add(layers.MaxPooling2D(pool_size=(2, 2)))
        model.add(layers.Flatten())
        model.add(layers.Dense(128, activation='relu'))
        model.add(layers.Dense(64, activation='relu'))  # Output layer for feature extraction
        return model

    def preprocess_image(self, image_path):
        """Load and preprocess an image for the CNN model."""
        image = load_img(image_path, target_size=(150, 150))  # Resize image to 150x150
        image_array = img_to_array(image)
        image_array = np.expand_dims(image_array, axis=0)  # Add batch dimension
        return image_array / 255.0  # Normalize the image

    def extract_features(self, image_path):
        """Extract feature vector for an image using the CNN model."""
        preprocessed_image = self.preprocess_image(image_path)
        features = self.model.predict(preprocessed_image)  # Extract features
        return features.flatten()  # Flatten to 1D feature vector

    def get_all_image_paths(self):
        """Recursively retrieve all image paths in the master folder."""
        image_paths = []
        for root, _, files in os.walk(self.master_folder):
            for file in files:
                if file.endswith(('.png', '.jpg', '.jpeg')):
                    image_paths.append(os.path.join(root, file))
        return image_paths

    def compare_image(self, input_image_path, similarity_threshold=0.85):
        """Compare input image with all images in the master folder."""
        input_features = self.extract_features(input_image_path)
        image_paths = self.get_all_image_paths()

        for image_path in image_paths:
            dataset_features = self.extract_features(image_path)
            # Compute cosine similarity
            similarity = cosine_similarity([input_features], [dataset_features])[0][0]
            print(f"Comparing with {image_path}, Similarity: {similarity:.2f}")
            
            if similarity >= similarity_threshold:
                folder_name = os.path.basename(os.path.dirname(image_path))  # Extract folder name
                print(f"Matched Image Found in Folder: {folder_name}")
                print(f"Matched Image Path: {image_path}")
                print(f"Similarity Score: {similarity:.2f}")
                return  # Stop after finding the first match with sufficient similarity

        print("No matching images found with the required similarity.")

# Usage Example
if __name__ == "__main__":
    # Get user input for the master folder and input image
    master_folder = input("Enter the path to the master folder containing images: ")
    input_image_path = input("Enter the path to the input image: ")

    # Create an instance of ImageComparison
    image_comparator = ImageComparison(master_folder)

    # Compare the input image with images in the master folder
    image_comparator.compare_image(input_image_path)
